var documenterSearchIndex = {"docs":
[{"location":"API/interface/","page":"-","title":"-","text":"Pages=[\"intergface.md\"]","category":"page"},{"location":"API/interface/","page":"-","title":"-","text":"Modules = [ReactionEngine]\nPages=[\"Utils.jl\"]","category":"page"},{"location":"Models/tprobe/#Thermoprobe","page":"Thermoprobe","title":"Thermoprobe","text":"","category":"section"},{"location":"Models/tprobe/","page":"Thermoprobe","title":"Thermoprobe","text":"Thermoprobe is a program for calculating the thermodynamic properties of pure species at a given temperature or for a mixture at a given temperature, pressure and composition. The program evaluates these properties using the NASA polynomials. For further details, please refer to the library section on thermodynamic properties","category":"page"},{"location":"Models/tprobe/#Running-the-code","page":"Thermoprobe","title":"Running the code","text":"","category":"section"},{"location":"Models/tprobe/","page":"Thermoprobe","title":"Thermoprobe","text":"The code is invoked by using the following method.","category":"page"},{"location":"Models/tprobe/","page":"Thermoprobe","title":"Thermoprobe","text":"thermoprobe(input_file::AbstractString, lib_dir::AbstractString)","category":"page"},{"location":"Models/tprobe/#ReactionEngine.thermoprobe-Tuple{AbstractString, AbstractString}","page":"Thermoprobe","title":"ReactionEngine.thermoprobe","text":"thermoprobe(inputfile::AbstractString, libdir::AbstractString)\n\ninput_file : Input xml file (String)\nlib_dir : The directory where the data files are present.            In the present version, the data files are present in the lib directory within the test folder.            The user must specify the relative path to the lib directory. The name of the lib directory need not be           \"lib\"\n\n\n\n\n\n","category":"method"},{"location":"Models/tprobe/","page":"Thermoprobe","title":"Thermoprobe","text":"On the Julia REPL ","category":"page"},{"location":"Models/tprobe/","page":"Thermoprobe","title":"Thermoprobe","text":"julia>using ReactionEngine\njulia>thermoprobe(\"thermo_probe.xml\",\"../lib/\")","category":"page"},{"location":"Models/tprobe/#Input-file","page":"Thermoprobe","title":"Input file","text":"","category":"section"},{"location":"Models/tprobe/","page":"Thermoprobe","title":"Thermoprobe","text":"The method takes two arguments input_path and lib_dir. The input_files specifies the input XML file and lib_dir speficies the path to the data files folder where therm.dat is present. The structure of the XML input file is shown below.","category":"page"},{"location":"Models/tprobe/","page":"Thermoprobe","title":"Thermoprobe","text":"<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n<thermo_probe>\n    <gasphase>CH4 CO CO2 H2 H2O O2 N2</gasphase>\n    <massfractions>CH4=0.2,H2O=0.4,N2=0.4</massfractions>\n    <T>298.15</T>\n    <p>1e5</p>\n</thermo_probe>","category":"page"},{"location":"Models/tprobe/","page":"Thermoprobe","title":"Thermoprobe","text":"The meaning of different XML tags is explained below.","category":"page"},{"location":"Models/tprobe/","page":"Thermoprobe","title":"Thermoprobe","text":"<thermo_probe> : tag specifying the model\n<gasphase> : list of gas-phase species. The species names must be separated by white spaces or tab\n<massfractions> : mass fractions of the gas-phase species. Instead of mass fractions, mole fractions may also be specified. In that case, the tag must be <molefractions>. You must ensure that the sum of mass or mole fractions specified is unity. There are no internal checks to ascertain this.\n<T>: Temperature in K\n<p> : Pressure in Pa","category":"page"},{"location":"Models/tprobe/#Output","page":"Thermoprobe","title":"Output","text":"","category":"section"},{"location":"Models/tprobe/","page":"Thermoprobe","title":"Thermoprobe","text":"The code does not generate any file output.  An example of terminal output that thermoprobe generates is shown below.","category":"page"},{"location":"Models/tprobe/","page":"Thermoprobe","title":"Thermoprobe","text":"Thermodynamic properties of pure species at 298.15(K) and 100000.0(Pa)\n\nSpecies          Enthalpy(J/mol)         Entropy(J/mol-K)        cp(J/mol-K)\n\nCH4              -7.4600e+04             +1.8637e+02             3.5691e+01 \nCO               -1.1053e+05             +1.9766e+02             2.9141e+01 \nCO2              -3.9351e+05             +2.1379e+02             3.7135e+01 \nH2               +1.3282e-05             +1.3068e+02             2.8836e+01 \nH2O              -2.4182e+05             +1.8883e+02             3.3588e+01 \nO2               +1.6343e-05             +2.0515e+02             2.9378e+01 \nN2               +1.4299e+00             +1.9151e+02             2.9071e+01 \n\nMixture properties\n\nEnthalpy (J/mol): -1.286916e+05 \nSpecific Heat (J/mol-K): 1.889851e+02 \nGibbs free energy (J/mol): -1.876808e+05 ","category":"page"},{"location":"Models/tprobe/","page":"Thermoprobe","title":"Thermoprobe","text":"","category":"page"},{"location":"Library/thermo/#Thermodynamic-properties","page":"Thermodynamic Properties","title":"Thermodynamic properties","text":"","category":"section"},{"location":"Library/thermo/","page":"Thermodynamic Properties","title":"Thermodynamic Properties","text":"The thermodynamic properties are calculated using the NASA polynomials (7 coefficient fit). The library module that reads the NASA polynomials expect the input file \"therm.dat\" in the \"data\" folder by default. The location for the \"data\" folder is at the same level as that of the \"src\" folder. The NASA polynomial file can be downloaded from a number of websites. The library lets you calculate the thermochemical data of pure species or for a gas mixture. A skeleton of the NASA polynomial is given below","category":"page"},{"location":"Library/thermo/","page":"Thermodynamic Properties","title":"Thermodynamic Properties","text":" H2               TPIS78H   2   00   00   00G   200.000  3500.000   1000.00    1\n 3.33727920E+00-4.94024731E-05 4.99456778E-07-1.79566394E-10 2.00255376E-14    2\n-9.50158922E+02-3.20502331E+00 2.34433112E+00 7.98052075E-03-1.94781510E-05    3\n 2.01572094E-08-7.37611761E-12-9.17935173E+02 6.83010238E-01 8.46810200E+03    4\nHO2               L 5/89H   1O   2   00   00G   200.000  3500.000  1000.000    1\n 4.01721090E+00 2.23982013E-03-6.33658150E-07 1.14246370E-10-1.07908535E-14    2\n 1.11856713E+02 3.78510215E+00 4.30179801E+00-4.74912051E-03 2.11582891E-05    3\n-2.42763894E-08 9.29225124E-12 2.94808040E+02 3.71666245E+00 1.00021620E+04    4","category":"page"},{"location":"Library/thermo/#Pure-species-propoerties","page":"Thermodynamic Properties","title":"Pure species propoerties","text":"","category":"section"},{"location":"Library/thermo/","page":"Thermodynamic Properties","title":"Thermodynamic Properties","text":"The pure species thermodynamic properties are calculated according to the following equations. ","category":"page"},{"location":"Library/thermo/#Specific-heat","page":"Thermodynamic Properties","title":"Specific heat","text":"","category":"section"},{"location":"Library/thermo/","page":"Thermodynamic Properties","title":"Thermodynamic Properties","text":"The molar specific heat capacity C_pk^0 (J/mol-K) of a chemical species k is calculated using ","category":"page"},{"location":"Library/thermo/","page":"Thermodynamic Properties","title":"Thermodynamic Properties","text":"fracC_pk^0R = a_1k + a_2k T_k + a_3kT^2 + a_4kT^3 + a_5k T^4","category":"page"},{"location":"Library/thermo/","page":"Thermodynamic Properties","title":"Thermodynamic Properties","text":"IdealGas.cp","category":"page"},{"location":"Library/thermo/#Main.IdealGas.cp","page":"Thermodynamic Properties","title":"Main.IdealGas.cp","text":"Calculate the specific heat of pure species J/mol-K\n\nUsage-1:\n\ncp(thermo,T)\n\n'thermo::NASAThermo': NASAThermo of the species\n'T::Float64': Temperature in K at which the property is required    \n\nUsage-2:\n\ncp(sp,T,thermo,ig)\n\n'sp::String' : species name\n'T::Float64' : Temperature K\n'thermo::SpeciesThermoObj' : Structure of SpeciesThermoObj\n'ig::Gasphase ' : Gasphase object\n\n\n\n\n\n","category":"function"},{"location":"Library/thermo/#Enthalpy","page":"Thermodynamic Properties","title":"Enthalpy","text":"","category":"section"},{"location":"Library/thermo/","page":"Thermodynamic Properties","title":"Thermodynamic Properties","text":"The molar enthalpy H_pk^0 (J/mol) of a chemical species k is calculated according to ","category":"page"},{"location":"Library/thermo/","page":"Thermodynamic Properties","title":"Thermodynamic Properties","text":"fracH_k^0RT = a_1k + fraca_2k2 T + fraca_3k3T^2 + fraca_4k4T^3 + fraca_5k5 T^4 + fraca_6kT","category":"page"},{"location":"Library/thermo/","page":"Thermodynamic Properties","title":"Thermodynamic Properties","text":"IdealGas.H","category":"page"},{"location":"Library/thermo/#Main.IdealGas.H","page":"Thermodynamic Properties","title":"Main.IdealGas.H","text":"H(thermo::NASAThermo, T::Float64) Calculates the enthalpy of pure species J/mol\n\nUsage-1:\n\nH(thermo,T)\n\n'thermo::NASAThermo': NASAThermo of the species\n'T::Float64': Temperature in K at which the property is required   \n\nUsage-2:\n\nH(sp,T,thermo,ig)\n\n'sp::String' : species name\n'T::Float64' : Temperature K\n'thermo::SpeciesThermoObj' : Structure of SpeciesThermoObj\n'ig::Gasphase ' : Gasphase object\n\n\n\n\n\n","category":"function"},{"location":"Library/thermo/#Entropy","page":"Thermodynamic Properties","title":"Entropy","text":"","category":"section"},{"location":"Library/thermo/","page":"Thermodynamic Properties","title":"Thermodynamic Properties","text":"The molar entropy S_pk^0 (J/mol-K) of a chemical species kis calculated according to ","category":"page"},{"location":"Library/thermo/","page":"Thermodynamic Properties","title":"Thermodynamic Properties","text":"fracS_k^0R = a_1k ln T + a_2k T + fraca_3k2T^2 + fraca_4k3T^3 + fraca_5k4 T^4 + a_7k","category":"page"},{"location":"Library/thermo/","page":"Thermodynamic Properties","title":"Thermodynamic Properties","text":"IdealGas.S","category":"page"},{"location":"Library/thermo/#Main.IdealGas.S","page":"Thermodynamic Properties","title":"Main.IdealGas.S","text":"S(thermo::NASAThermo, T::Float64) Calculates the entropy of pure species J/mol-K\n\nUsage-1:\n\nS(thermo,T)\n\n'thermo::NASAThermo': NASAThermo of the species\n'T::Float64': Temperature in K at which the property is required    \n\nUsage-2:\n\nS(sp,T,thermo,ig)\n\n'sp::String' : species name\n'T::Float64' : Temperature K\n'thermo::SpeciesThermoObj' : Structure of SpeciesThermoObj\n'ig::Gasphase ' : Gasphase object\n\n\n\n\n\n","category":"function"},{"location":"Library/thermo/#Mixture-average-properties","page":"Thermodynamic Properties","title":"Mixture average properties","text":"","category":"section"},{"location":"Library/thermo/","page":"Thermodynamic Properties","title":"Thermodynamic Properties","text":"The mixture average specific heat, enthalpy and entropy may be calculated using the following equations","category":"page"},{"location":"Library/thermo/#Specific-heat-2","page":"Thermodynamic Properties","title":"Specific heat","text":"","category":"section"},{"location":"Library/thermo/","page":"Thermodynamic Properties","title":"Thermodynamic Properties","text":"overlineC_p = sum_k=1^K C_pkX_k","category":"page"},{"location":"Library/thermo/","page":"Thermodynamic Properties","title":"Thermodynamic Properties","text":"IdealGas.cpmix","category":"page"},{"location":"Library/thermo/#Main.IdealGas.cpmix","page":"Thermodynamic Properties","title":"Main.IdealGas.cpmix","text":"Calculates the specific heat of a mixture in J/mol-K\n\nUsage\n\ncpmix(td,T,mlf)\n\n'thermoObj::SpeciesThermoObj' : Structure of SpeciesThermoObj\n'T::Float64' : Temperature in K\n'mlf::Array{Float64,1}' : species mole fractions    \n\n\n\n\n\n","category":"function"},{"location":"Library/thermo/#Enthalpy-2","page":"Thermodynamic Properties","title":"Enthalpy","text":"","category":"section"},{"location":"Library/thermo/","page":"Thermodynamic Properties","title":"Thermodynamic Properties","text":"overlineH = sum_k=1^K H_kX_k","category":"page"},{"location":"Library/thermo/","page":"Thermodynamic Properties","title":"Thermodynamic Properties","text":"IdealGas.hmix","category":"page"},{"location":"Library/thermo/#Entropy-2","page":"Thermodynamic Properties","title":"Entropy","text":"","category":"section"},{"location":"Library/thermo/","page":"Thermodynamic Properties","title":"Thermodynamic Properties","text":"overlineS = sum_k=1^K bigg(S_k^0 -Rln X_k - Rln(pP_mathrmatm) bigg)X_k","category":"page"},{"location":"Library/thermo/#Gibb's-free-energy","page":"Thermodynamic Properties","title":"Gibb's free energy","text":"","category":"section"},{"location":"Library/thermo/","page":"Thermodynamic Properties","title":"Thermodynamic Properties","text":"overlineG = sum_k=1^K bigg H_k - T_kbigg(S_k^0 -Rln X_k - Rln(pP_mathrmatm) bigg) biggX_k","category":"page"},{"location":"Models/plug/#Plug-flow-reactor","page":"Plug","title":"Plug flow reactor","text":"","category":"section"},{"location":"Models/plug/","page":"Plug","title":"Plug","text":"The Plug flow reactor model simulates one dimensional tubular reactor. The governing equations solved are","category":"page"},{"location":"Models/plug/","page":"Plug","title":"Plug","text":"fracd (rho u Y_k)dz = dots_k M_k fracA_sLA_c + dotomega_kM_k ","category":"page"},{"location":"Models/plug/","page":"Plug","title":"Plug","text":"fracd (rho u)dz = sum_k=1^N_g dots_k M_k fracA_sLA_c ","category":"page"},{"location":"Models/plug/","page":"Plug","title":"Plug","text":"In the above equations, rho is the density (kg/m^3), u is the velocity (m/s), Y_k is the mass fraction of species k, z is the axial coordinate (m), dots_k is the molar production rate of species k due to surface reactions (mol/m^2-s), dotomega_k is the molar production rate of species k due to gasphase reactions (mol/m^3-s), M_k is the molecular weight of species k, A_sL is the surface area per unit length (m), A_c is the cross sectional area (m^2) and eta is surface area enhancement factor. This factor accounts for the actual surface area available for the surface reactions over the actual geometric surface area of the tubular reactor. ","category":"page"},{"location":"Models/plug/#Running-the-code","page":"Plug","title":"Running the code","text":"","category":"section"},{"location":"Models/plug/","page":"Plug","title":"Plug","text":"The code is invoked by using the following method.","category":"page"},{"location":"Models/plug/","page":"Plug","title":"Plug","text":"plug(input_file::AbstractString, lib_dir::AbstractString)","category":"page"},{"location":"Models/plug/#ReactionEngine.plug-Tuple{AbstractString, AbstractString}","page":"Plug","title":"ReactionEngine.plug","text":"plug(inputfile::AbstractString, libdir::AbstractString)\n\ninput_file : Input xml file (String)\nlib_dir : The directory where the data files are present.            In the present version, the data files are present in the lib directory within the test folder.            The user must specify the relative path to the lib directory. The name of the lib directory need not be           \"lib\"\n\n\n\n\n\n","category":"method"},{"location":"Models/plug/","page":"Plug","title":"Plug","text":"On the Julia REPL ","category":"page"},{"location":"Models/plug/","page":"Plug","title":"Plug","text":"julia>using ReactionEngine\njulia>plug(\"plug.xml\",\"../lib/\")","category":"page"},{"location":"Models/plug/#Input-file","page":"Plug","title":"Input file","text":"","category":"section"},{"location":"Models/plug/","page":"Plug","title":"Plug","text":"The method takes file_path as the argument. The file_path points to the input XML file. The structure of the XML input file is shown below.","category":"page"},{"location":"Models/plug/","page":"Plug","title":"Plug","text":"<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n<plug>\n    <gasphase>CH4 H2O H2 CO CO2 O2 N2</gasphase>\n    <molefractions>CH4=0.25,CO2=0.25,N2=0.5</molefractions>\n    <T>1073.15</T>\n    <p>1e5</p>\n    <length>0.3</length>\n    <dia>0.005</dia>\n    <u>0.1</u>\n    <Tw>1073.15</Tw>\n    <isothermal>true</isothermal>\n    <cat-geom-factor>1000</cat-geom-factor>\n    <surface_mech>data/ch4ni.xml</surface_mech>\n</plug","category":"page"},{"location":"Models/plug/","page":"Plug","title":"Plug","text":"The meaning of different tags is specified below.","category":"page"},{"location":"Models/plug/","page":"Plug","title":"Plug","text":"<plug> : The root XML tag for Plug\n<gasphase> : list of gas-phase species. The species names must be separated by white spaces or tab\n<molefractions> : inlet mole fraction of the gas-phase species. Instead of mole fractions, mass fractions may also be specified. In that case, the tag must be <massfractions>. You must ensure that the sum of mass or mole fractions specified is unity. There are no internal checks to ascertain this. \n<T>: operating temperature in K\n<p>: initial pressure in Pa\n<length> : length of the reactor in m\n<dia> : diameter of the reactor in m\n<u> : inlet velocity of the reacting mixture in m/s\n<Tw> : wall temperature in K. This option is provided for performing non-isothermal simulation, which is not supported in the current release\n<isothermal> : a boolean which accepts wither true or false. For the current release this must be true\n<cat-geom-factor> : surface area enhancement factor (refer eta in the governing equations)\n<surface_mech> : name of the surface reaction mechanism. Must be specified along with the path","category":"page"},{"location":"Models/plug/#Output","page":"Plug","title":"Output","text":"","category":"section"},{"location":"Models/plug/","page":"Plug","title":"Plug","text":"The code generates two output files in the same directory where the input file cstr.xml is present.  The file gas_profile.dat contains the mole fraction of the gas phase species as a function of time. The file surf_profile.dat contains the surface coverages of adsorbed species as a function of time.  In addition to these two files, the code also generates terminal output, which shows integration progress. The terminal output is nothing by the integration time. ","category":"page"},{"location":"Models/plug/","page":"Plug","title":"Plug","text":"An example terminal output is shown below","category":"page"},{"location":"Models/plug/","page":"Plug","title":"Plug","text":"julia> plug(\"test/plug/plug.xml\")\n0.0000e+00\n1.1015e-09\n1.6078e-09\n2.1141e-09\n...\n...\n...\n2.6191e-01\n2.8298e-01\n3.0000e-01\nSolver integration: Success","category":"page"},{"location":"Models/plug/","page":"Plug","title":"Plug","text":"A sample output of gas_profile.dat is shown below ","category":"page"},{"location":"Models/plug/","page":"Plug","title":"Plug","text":"         z           T           p           u         rho         CH4         H2O          H2          CO         CO2          O2          N2\n0.0000e+00  1.0732e+03  1.0000e+05  1.0000e-01  3.2524e-01  2.5000e-01  0.0000e+00  0.0000e+00  0.0000e+00  2.5000e-01  0.0000e+00  5.0000e-01\n8.8802e-15  1.0732e+03  1.0000e+05  1.0000e-01  3.2524e-01  2.5000e-01  1.5726e-11  5.9064e-12  3.7358e-11  2.5000e-01  1.5402e-23  5.0000e-01\n8.8811e-11  1.0732e+03  1.0000e+05  1.0000e-01  3.2524e-01  2.5000e-01  1.5763e-07  5.8187e-08  3.7344e-07  2.5000e-01  1.5149e-19  5.0000e-01\n...\n...\n...\n2.8298e-01  1.0732e+03  1.0000e+05  1.4643e-01  2.2212e-01  1.2200e-02  5.6965e-03  3.1137e-01  3.2276e-01  6.5032e-03  -6.7405e-19 3.4147e-01\n3.0000e-01  1.0732e+03  1.0000e+05  1.4643e-01  2.2212e-01  1.2200e-02  5.6965e-03  3.1137e-01  3.2276e-01  6.5032e-03  -4.3287e-13 3.4147e-01","category":"page"},{"location":"Models/plug/","page":"Plug","title":"Plug","text":"A sample output of surf_profile.dat is shown below ","category":"page"},{"location":"Models/plug/","page":"Plug","title":"Plug","text":"         z           T        (NI)       H(NI)       O(NI)     CH4(NI)     H2O(NI)     CO2(NI)      CO(NI)      OH(NI)       C(NI)     HCO(NI)      CH(NI)     CH3(NI)     CH2(NI)\n0.0000e+00  1.0732e+03  8.9517e-01  2.1543e-03  1.0249e-01  1.7333e-09  2.2731e-08  3.4120e-06  1.6186e-04  6.7900e-06  7.3130e-06  1.8236e-17  5.9645e-11  5.3919e-10  3.8717e-10\n8.8802e-15  1.0732e+03  8.9517e-01  2.1543e-03  1.0249e-01  1.7333e-09  2.2731e-08  3.4120e-06  1.6186e-04  6.7900e-06  7.3130e-06  1.8236e-17  5.9645e-11  5.3919e-10  3.8717e-10\n...\n...\n...\n2.8298e-01  1.0732e+03  4.1508e-01  1.5854e-01  5.2598e-05  3.9230e-11  6.8172e-06  5.8269e-07  4.2629e-01  5.5308e-07  2.7830e-05  6.5821e-11  1.5517e-11  9.7290e-11  4.8802e-11\n3.0000e-01  1.0732e+03  4.1508e-01  1.5854e-01  5.2598e-05  3.9230e-11  6.8172e-06  5.8269e-07  4.2629e-01  5.5308e-07  2.7830e-05  6.5820e-11  1.5517e-11  9.7290e-11  4.8802e-11","category":"page"},{"location":"Library/schem/#Surface-chemistry","page":"Surface Chemistry","title":"Surface chemistry","text":"","category":"section"},{"location":"Library/schem/#Input-file","page":"Surface Chemistry","title":"Input file","text":"","category":"section"},{"location":"Library/schem/","page":"Surface Chemistry","title":"Surface Chemistry","text":"The input file for the surface chemistry is an XML file with the following structure, and the file is expected in the “data” folder at the same level as \"src\" folder. The outermost tag is <surface_chemistry>, which takes in two arguments. The argument unit takes in the unit of activation energy, and the attribute name accepts a string, which is the name of the mechanism. One of the limitations of the current implementation is that it expects the stoichiometric coefficient of participating species to be one. ","category":"page"},{"location":"Library/schem/","page":"Surface Chemistry","title":"Surface Chemistry","text":"<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n<surface_chemisrty unit=\"kJ/mol\" name=\"ch4ni\">\n    <species>(ni) H(ni) O(ni) CH4(ni) H2O(ni) CO2(ni) CO(ni) OH(ni) C(ni) HCO(ni) CH(ni)  CH3(ni) CH2(ni) </species>\n    <site name=\"(ni)\">\n        <coordination>ch4(ni)=1,co(ni)=2.0</coordination>\n        <density unit=\"mol/cm2\">2.66e-09</density>\n        <initial>h2o(ni)=0.4,(ni)=0.6 </initial>\n    </site>\n    <stick>\n        <rxn id=\"1\" >h2 + (ni) + (ni) => h(ni) + h(ni)   @ 1.0000e-2 </rxn>\n        <rxn id=\"2\" >o2 + (ni) + (ni) => o(ni) + o(ni)   @ 1.0000e-2 </rxn>\n        ...\n        ...\n        <rxn id=\"6\" >co + (ni) => co(ni)                 @ 5.0000e-1 </rxn>\n    </stick>\n    <arrhenius>\n        <rxn id=\"7\"  >h(ni) + h(ni) => (ni) + (ni) + h2  @ 2.545e+19  0.0  81.21  </rxn>\n        <rxn id=\"8\"  >o(ni) + o(ni) => (ni) + (ni) + o2  @ 4.283e+23  0.0  474.95 </rxn>\n        ...\n        ...\n        <rxn id=\"42\" >c(ni) + oh(ni) => o(ni) + ch(ni)   @ 1.625e+21  0.0  128.61 </rxn>\n    </arrhenius>\n    <coverage id=\"12 20 21\">co(ni)=-50</coverage>\n    <coverage id=\"23\">co(ni)=50</coverage>\n    <mwc>3 4</mwc>\n    <order id=\"23 \">co(ni)=2</order>\n    <order id=\"12 \">c(ni)=1.5</order>\n</surface_chemisrty>","category":"page"},{"location":"Library/schem/","page":"Surface Chemistry","title":"Surface Chemistry","text":"The order in which the tags appear in the XML file is immaterial. However, the main tags can appear only once. ","category":"page"},{"location":"Library/schem/#Surface-adsorbed-species","page":"Surface Chemistry","title":"Surface adsorbed species","text":"","category":"section"},{"location":"Library/schem/","page":"Surface Chemistry","title":"Surface Chemistry","text":"The XML element <species> specifies all the surface species, including the active site that participates in the reactions. The user may specify the names in upper case or lower case.  ","category":"page"},{"location":"Library/schem/#Site-specific-information","page":"Surface Chemistry","title":"Site specific information","text":"","category":"section"},{"location":"Library/schem/","page":"Surface Chemistry","title":"Surface Chemistry","text":"The XML tag <site> is used to specify the site-specific information such as active site, the site coordination number for the adsorbed species, the surface site density, and the initial coverages. An example snippet is shown below.","category":"page"},{"location":"Library/schem/","page":"Surface Chemistry","title":"Surface Chemistry","text":"<site name=\"(ni)\">\n    <coordination>ch4(ni)=1,co(ni)=2.0</coordination>\n    <density unit=\"mol/cm2\">2.66e-09</density>\n    <initial>h2o(ni)=0.4,(ni)=0.6 </initial>\n</site>","category":"page"},{"location":"Library/schem/","page":"Surface Chemistry","title":"Surface Chemistry","text":"The <site> tag has an attribute name, which is the name of the active site, and must be part of the <species> list. The tag <coorination> is used to specify the site coordination number for each of the adsobed species. By default, the site coordination number for all adsorbed species is one. The user need not specify the <coordination> tag if the site coordination number for all adsorbed species is one. However, if any adsorbed species occupies more than one adsorbed site, then those species must be specified in the <coordination> tag with their corresponding site coordination number. The site density is specified using the XML element <density>. The unit for site density can be either mol/m^2 or mol/cm^2. The initial state of the surface is specified using the XML element <initial>. The sum of coverages mentioned in the <initial> elements must add up to 1.0. The specification of this initial coverage has no bearing on the calculation results. The state of the surface is decided by the gas phase and the prevailing temperature and pressure conditions. The values specified in the <initial> element are only for initialization. ","category":"page"},{"location":"Library/schem/#Sticking-reactions","page":"Surface Chemistry","title":"Sticking reactions","text":"","category":"section"},{"location":"Library/schem/","page":"Surface Chemistry","title":"Surface Chemistry","text":"The adsorption reactions are specified as sticking reactions. All such reactions are specified within the XML tag <stick> with the XML element <rxn>. The <rxn> element takes id as an attribute, which must be unique. Ideally, the id must be a series representing the number of reactions present in the mechanism. The content of the <rxn> element is the reaction’s stoichiometry, followed by the reaction parameters. The stoichiometry and the parameters are separated by the ‘@‘ symbol. A ‘=>’ symbol in the stoichiometry represents a forward reaction. If reverse reactions need to be specified, the user must ensure that the NASA polynomials are available for the surface adsorbed species. Three parameters can be specified after the ‘@‘ symbol. The first parameter specifies the sticking coefficient, the second is the temperature dependency of the sticking coefficient, and the third is the activation energy. Generally, sticking reactions are specified only the sticking coefficient, and in case the other two parameters are specified, then the rate constant will be modified accordingly. For more details on how the sticking coefficient is converted to rate constant, please refer to the section on rate calculation. An example of the specification of the sticking reaction is shown below. ","category":"page"},{"location":"Library/schem/","page":"Surface Chemistry","title":"Surface Chemistry","text":"<stick>\n    <rxn id=\"1\"> h2 + (ni) + (ni) => h(ni) + h(ni) @ 1.0000e-2 </rxn>\n</stick>","category":"page"},{"location":"Library/schem/","page":"Surface Chemistry","title":"Surface Chemistry","text":"In the above example, 1.0e-2 represents the sticking coefficient s^0. ","category":"page"},{"location":"Library/schem/#Arrhenius-reaction","page":"Surface Chemistry","title":"Arrhenius reaction","text":"","category":"section"},{"location":"Library/schem/","page":"Surface Chemistry","title":"Surface Chemistry","text":"The desorption reactions, dissociation reactions, and disproportionation reactions are specified in the Arrhenius form. These reactions are defined in the XML tag <arrhenius>. The <rxn> element is the same as that of the sticking reaction; however, the first reaction parameter, in this case, represents the pre-exponential factor for the reaction. The second and third represent the pre-exponential factor’s temperature dependence and the activation energy. The unit of the activation energy is specified as an attribute for the outermost element <surface_chemistry>. An example of Arrhenius reaction specification is shown below. ","category":"page"},{"location":"Library/schem/","page":"Surface Chemistry","title":"Surface Chemistry","text":"<arrhenius>\n        <rxn id=\"7\"> h(ni) + h(ni) => (ni) + (ni) + h2  @ 2.545e+19     0.0     81.21   </rxn>\n</arrhenius>","category":"page"},{"location":"Library/schem/","page":"Surface Chemistry","title":"Surface Chemistry","text":"2.545e+19 is the pre-exponential factor in the above example, 0.0 is the temperature exponent beta, and  81.21 is the activation energy in kJ/mol. The units of the pre-exponential factors are assumed as cm-mol-s. It does not support any other units currently. ","category":"page"},{"location":"Library/schem/#Coverage-dependent-reactions","page":"Surface Chemistry","title":"Coverage dependent reactions","text":"","category":"section"},{"location":"Library/schem/","page":"Surface Chemistry","title":"Surface Chemistry","text":"The activation energy of some of the reactions may depend on the surface coverage of adsorbed species.  The coverage dependency of a reaction is expressed using the XML element <coverage>. The element takes an attribute id, a single string of reaction id’s separated by white space. For example, the following specification means,","category":"page"},{"location":"Library/schem/","page":"Surface Chemistry","title":"Surface Chemistry","text":"<coverage id=\"12 20 21\">co(ni)=-50</coverage>","category":"page"},{"location":"Library/schem/","page":"Surface Chemistry","title":"Surface Chemistry","text":"Reactions 12, 20, and 21 are dependent on the surface coverage of CO. The modified activation energy, in this such cases will be","category":"page"},{"location":"Library/schem/","page":"Surface Chemistry","title":"Surface Chemistry","text":"E_i = E_i + epsilon_ki theta_k","category":"page"},{"location":"Library/schem/","page":"Surface Chemistry","title":"Surface Chemistry","text":"Where E_i is the activation energy of i'th reaction in the mechanism, epsilon_ki is the coverage dependent activation energy of i'th reaction on k'th species, and theta_k is the surface coverage of species k. All reactions that are dependent on the coverage of a particular adsorbed species must be specified using a single XML element <coverage>. A reaction can have multiple coverage dependencies. In such cases, multiple <coverage> elements must be used to specify the coverage dependency. For e.g. if reaction 2 is dependent on the coverage of CO by -50 kJ/mol and O by 20 kJ/mol, then its coverage dependency is represented as","category":"page"},{"location":"Library/schem/","page":"Surface Chemistry","title":"Surface Chemistry","text":"<coverage id=\"2\">co(ni)=-50</coverage>\n<coverage id=\"2\">o(ni)=20</coverage>","category":"page"},{"location":"Library/schem/#Modification-of-reaction-order","page":"Surface Chemistry","title":"Modification of reaction order","text":"","category":"section"},{"location":"Library/schem/","page":"Surface Chemistry","title":"Surface Chemistry","text":"Since the mechanism assumes unit stoichiometric coefficients for the participating reactants and products, the order of the reaction with respect to any reacting species will be one. Additional order dependency may be introduced using the XML element <order>. An example is shown below.","category":"page"},{"location":"Library/schem/","page":"Surface Chemistry","title":"Surface Chemistry","text":"<order id=\"23 \">co(ni)=2</order>","category":"page"},{"location":"Library/schem/","page":"Surface Chemistry","title":"Surface Chemistry","text":"This means in reaction 23, the order of the reaction w.r.t surface coverage of CO is 2. For such reactions, the rate constant will be multiplied by theta_k^mu_ki. Similar to the case of coverage dependency, multiple order dependence may be specified for a given reaction. An example is given below","category":"page"},{"location":"Library/schem/","page":"Surface Chemistry","title":"Surface Chemistry","text":"<order id=\"23 \">co(ni)=2</order>\n<order id=\"23 \">o(ni)=3</order>","category":"page"},{"location":"Library/schem/","page":"Surface Chemistry","title":"Surface Chemistry","text":"Please refer to the rate calculation section for more details. ","category":"page"},{"location":"Library/schem/#Calculation-of-reaction-rates","page":"Surface Chemistry","title":"Calculation of reaction rates","text":"","category":"section"},{"location":"Library/schem/","page":"Surface Chemistry","title":"Surface Chemistry","text":"The reaction rates are calculated using mean-field approximation. The relevant equations are given below.","category":"page"},{"location":"Library/schem/#Conversion-of-sticking-reactions","page":"Surface Chemistry","title":"Conversion of sticking reactions","text":"","category":"section"},{"location":"Library/schem/","page":"Surface Chemistry","title":"Surface Chemistry","text":"The sticking reactions are converted to standard rate constants according to ","category":"page"},{"location":"Library/schem/","page":"Surface Chemistry","title":"Surface Chemistry","text":"k = fracs^0_kGamma^mathrmn sqrtfracRT2pi M_k","category":"page"},{"location":"Library/schem/","page":"Surface Chemistry","title":"Surface Chemistry","text":"n is the number of free sites available for collision. Gamma is the total site density, s^0_k is the sticking coefficient of species k, and M_k is the molecular weight of the species. The sticking coefficient  may also be expressed in terms of arrhenius expression according to","category":"page"},{"location":"Library/schem/","page":"Surface Chemistry","title":"Surface Chemistry","text":"s^0_k = aT^b exp(-cRT)","category":"page"},{"location":"Library/schem/","page":"Surface Chemistry","title":"Surface Chemistry","text":"If Motz-Wise correction is specified for the reaction, then k is modified according to ","category":"page"},{"location":"Library/schem/","page":"Surface Chemistry","title":"Surface Chemistry","text":"k = frack(1-05s^0_k)","category":"page"},{"location":"Library/schem/","page":"Surface Chemistry","title":"Surface Chemistry","text":"If additional parameters such as the temperature dependence of the pre-exponential factor and activation energy are specified for a reaction, then the rate constant becomes","category":"page"},{"location":"Library/schem/","page":"Surface Chemistry","title":"Surface Chemistry","text":"k = k T^beta exp(-ERT)","category":"page"},{"location":"Library/schem/","page":"Surface Chemistry","title":"Surface Chemistry","text":"The forward reaction rate constant for the i'th reaction in the mechanism is calculated according to ","category":"page"},{"location":"Library/schem/","page":"Surface Chemistry","title":"Surface Chemistry","text":"k_fi = k^0_i T^beta_i expleft(-fracE_iRTright) prod_k=N_g+1^N_g+N_s theta_k^mu_ki expleft( -fracepsilon_kitheta_kRTright)","category":"page"},{"location":"Library/schem/","page":"Surface Chemistry","title":"Surface Chemistry","text":"Here k^0_i is the pre-exponential factor for the reaction i beta_i is the power for the temperature dependence of the pre-exponential factor, N_g and N_s are respectively the number of gasphase and surface species. theta_k^mu_ki is the term accounting for the modification of the reaction order as explained earlier, epsilon_ki is the coverage dependent activation energy of reaction i on species k, and theta_k is the surface coverage of species k. The rate of production or consumption of a species k is then calculated according to ","category":"page"},{"location":"Library/schem/","page":"Surface Chemistry","title":"Surface Chemistry","text":"dots_k = sum_i=1^N_r nu_ki  left(  prod_k=1^N_g + N_s k_fi X_k^nu_ki^prime - prod_k=1^N_g + N_s k_ri X_k^nu_ki^primeprimeright) ","category":"page"},{"location":"Library/schem/","page":"Surface Chemistry","title":"Surface Chemistry","text":"where nu_ki^prime is the stoichiometric coefficient of the species k on the reactant side and nu_ki^primeprime is the stoichiometric coefficient of species k on the product side, and X_k is the surface concentration of species k. The relationship between the surface coverages and surface concentrations is given by","category":"page"},{"location":"Library/schem/","page":"Surface Chemistry","title":"Surface Chemistry","text":"theta_k = fracX_ksigma_kGamma","category":"page"},{"location":"Library/schem/","page":"Surface Chemistry","title":"Surface Chemistry","text":"where sigma_k is the site coordination number for species k.","category":"page"},{"location":"Models/cstr/#Continuous-Stirred-Tank-Reactor-(CSTR)","page":"Cstr","title":"Continuous Stirred Tank Reactor (CSTR)","text":"","category":"section"},{"location":"Models/cstr/","page":"Cstr","title":"Cstr","text":"The Cstr model simulates a continuous stirred tank reactor. This type of reactor model may be used to simulate a packed bed reactor, when the length to diameter ratio is small, or when a packed bed reactor is operating under differential conditions. The code integrates the following governing equation ","category":"page"},{"location":"Models/cstr/","page":"Cstr","title":"Cstr","text":"rho V fracdY_kdt = dotq_in rho_in Y_kin - dotq_out rho Y_k + dots_k M_k A_s + dotomega_kM_k V","category":"page"},{"location":"Models/cstr/","page":"Cstr","title":"Cstr","text":"Here Y_k is the mass fraction of species k, rho is the density (kg/m^3) of the mixture, V is the reactor volume (m^3), M_k is the molecular weight of species k (Kg/mol), dotq is the volumetric flow rate (m^3/s), dots_k is the molar production rate (mol/m^2-s) of species k due to surface reactions, dotomega_k is the molar production rate (mol/m^3-s) of species k due to gas phase reactions, and A_s is the surface are in m^2 The subscripts in and out respectively refers to the inlet and outlet conditions. The outlet volumetric flow rate is related to the inlet volumetric flow rate according to ","category":"page"},{"location":"Models/cstr/","page":"Cstr","title":"Cstr","text":"dotq_out = fracq_in barM_in barM","category":"page"},{"location":"Models/cstr/","page":"Cstr","title":"Cstr","text":"Here barM refers the average molecular weights. The above equation for outlet volumetric flow rate is valid only when there is no mass accumulation within the reactor. ","category":"page"},{"location":"Models/cstr/#Running-the-code","page":"Cstr","title":"Running the code","text":"","category":"section"},{"location":"Models/cstr/","page":"Cstr","title":"Cstr","text":"The code is invoked by using the following method.","category":"page"},{"location":"Models/cstr/","page":"Cstr","title":"Cstr","text":"cstr(input_file::AbstractString, lib_dir::AbstractString)","category":"page"},{"location":"Models/cstr/#ReactionEngine.cstr-Tuple{AbstractString, AbstractString}","page":"Cstr","title":"ReactionEngine.cstr","text":"cstr(inputfile::AbstractString, libdir::AbstractString)\n\ninput_file : Input xml file (String)\nlib_dir : The directory where the data files are present.            In the present version, the data files are present in the lib directory within the test folder.            The user must specify the relative path to the lib directory. The name of the lib directory need not be           \"lib\"\n\n\n\n\n\n","category":"method"},{"location":"Models/cstr/","page":"Cstr","title":"Cstr","text":"On the Julia REPL ","category":"page"},{"location":"Models/cstr/","page":"Cstr","title":"Cstr","text":"julia>using ReactionEngine\njulia>cstr(\"cstr.xml\",\"../lib/\")","category":"page"},{"location":"Models/cstr/#Input-file","page":"Cstr","title":"Input file","text":"","category":"section"},{"location":"Models/cstr/","page":"Cstr","title":"Cstr","text":"The method takes file_path and the path to lib directory as the arguments. The file_path points to the input XML file. The structure of the XML input file is shown below.","category":"page"},{"location":"Models/cstr/","page":"Cstr","title":"Cstr","text":"<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n<cstr>\n    <gasphase>CH4 H2O H2 CO CO2 O2 N2</gasphase>\n    <molefractions>CH4=0.25,H2O=0.25,N2=0.5</molefractions>\n    <T>1073.15</T>\n    <p>1e5</p>\n    <volume>1e-5</volume>\n    <flow-rate>1.66e-6</flow-rate>\n    <As>5e-3</As>\n    <time>10</time>\n    <surface_mech>data/ch4ni.xml</surface_mech>\n</cstr>","category":"page"},{"location":"Models/cstr/","page":"Cstr","title":"Cstr","text":"The meaning of different tags is specified below.","category":"page"},{"location":"Models/cstr/","page":"Cstr","title":"Cstr","text":"<cstr> : The root XML tag for Cstr\n<gasphase> : list of gas-phase species. The species names must be separated by white spaces or tab\n<molefractions> : inlet mole fraction of the gas-phase species. Instead of mole fractions, mass fractions may also be specified. In that case, the tag must be <massfractions>. You must ensure that the sum of mass or mole fractions specified is unity. There are no internal checks to ascertain this. \n<T>: operating temperature in K\n<p>: initial pressure in Pa\n<volume> : reactor volume in m^3\n<flow-rate> : volumetric flow rate in m^3/s\n<As> : surface area available for surface reactions m^2\n<time> : integration time in s\n<surface_mech> : name of the surface reaction mechanism. Must be specified along with the path","category":"page"},{"location":"Models/cstr/#Output","page":"Cstr","title":"Output","text":"","category":"section"},{"location":"Models/cstr/","page":"Cstr","title":"Cstr","text":"The code generates two output files in the same directory where the input file cstr.xml is present.  The file gas_profile.dat contains the mole fraction of the gas phase species as a function of time. The file surf_profile.dat contains the surface coverages of adsorbed species as a function of time.  In addition to these two files, the code also generates terminal output, which shows integration progress. The terminal output is nothing by the integration time. ","category":"page"},{"location":"Models/cstr/","page":"Cstr","title":"Cstr","text":"An example terminal output is shown below","category":"page"},{"location":"Models/cstr/","page":"Cstr","title":"Cstr","text":"julia> cstr(\"test/cstr/cstr.xml\")\n0.0000e+00\n5.4134e-12\n7.3599e-12\n1.0969e-11\n..\n..\n..\n9.3568e+00\n9.6322e+00\n9.9232e+00\n1.0000e+01\nSolver Integration: Success","category":"page"},{"location":"Models/cstr/","page":"Cstr","title":"Cstr","text":"A sample output of gas_profile.dat is shown below ","category":"page"},{"location":"Models/cstr/","page":"Cstr","title":"Cstr","text":"         t           T           p         rho         CH4         H2O          H2          CO         CO2          O2          N2\n0.0000e+00  1.0732e+03  1.0000e+05  2.5240e-01  2.5000e-01  2.5000e-01  0.0000e+00  0.0000e+00  0.0000e+00  0.0000e+00  5.0000e-01\n5.4134e-12  1.0732e+03  1.0000e+05  2.5240e-01  2.5000e-01  2.5001e-01  1.4392e-15  1.4653e-29  1.9600e-41  1.8072e-32  4.9999e-01\n7.3599e-12  1.0732e+03  1.0000e+05  2.5240e-01  2.5000e-01  2.5001e-01  3.6770e-15  2.9837e-29  3.0298e-40  5.6564e-32  4.9999e-01\n...\n...\n9.9232e+00  1.0732e+03  1.0000e+05  2.2739e-01  1.7569e-01  1.5482e-01  1.6954e-01  2.8553e-02  2.0940e-02  3.9303e-19  4.5046e-01\n1.0000e+01  1.0732e+03  1.0000e+05  2.2738e-01  1.7566e-01  1.5479e-01  1.6961e-01  2.8572e-02  2.0942e-02  4.0255e-19  4.5044e-01","category":"page"},{"location":"Models/cstr/","page":"Cstr","title":"Cstr","text":"A sample output of surf_profile.dat is shown below ","category":"page"},{"location":"Models/cstr/","page":"Cstr","title":"Cstr","text":"         t           T        (NI)       H(NI)       O(NI)     CH4(NI)     H2O(NI)     CO2(NI)      CO(NI)      OH(NI)       C(NI)     HCO(NI)      CH(NI)     CH3(NI)     CH2(NI)\n0.0000e+00  1.0732e+03  6.0000e-01  0.0000e+00  0.0000e+00  0.0000e+00  4.0000e-01  0.0000e+00  0.0000e+00  0.0000e+00  0.0000e+00  0.0000e+00  0.0000e+00  0.0000e+00  0.0000e+00\n5.4134e-12  1.0732e+03  6.0847e-01  3.0035e-04  3.3271e-05  1.1713e-09  3.9096e-01  2.8741e-33  6.1498e-21  2.3380e-04  1.1015e-12  2.3785e-23  8.9706e-13  4.7230e-11  8.9960e-12\n7.3599e-12  1.0732e+03  6.1146e-01  4.2230e-04  5.9785e-05  1.1839e-09  3.8776e-01  6.0780e-32  1.8970e-20  3.0273e-04  2.9147e-12  8.4330e-23  1.7009e-12  6.0154e-11  1.5013e-11\n...\n...\n...\n9.9232e+00  1.0732e+03  6.2063e-01  1.7493e-01  3.9236e-03  8.4466e-10  2.7702e-04  3.7430e-06  2.0019e-01  3.0447e-05  2.3741e-05  6.4247e-12  2.0465e-11  2.6758e-10  1.1674e-10\n1.0000e+01  1.0732e+03  6.2056e-01  1.7494e-01  3.9209e-03  8.4442e-10  2.7693e-04  3.7428e-06  2.0024e-01  3.0431e-05  2.3746e-05  6.4295e-12  2.0465e-11  2.6755e-10  1.1672e-10","category":"page"},{"location":"Library/trans/#The-transport-library","page":"Transport Properties","title":"The transport library","text":"","category":"section"},{"location":"Library/trans/","page":"Transport Properties","title":"Transport Properties","text":"ReactionEngine lets you calculate the viscosity, thermal conductivity and diffusion coefficients. The code relies on transport.dat for the evaluation of these properties. A sample of the transport.dat file is shown below.","category":"page"},{"location":"Library/trans/","page":"Transport Properties","title":"Transport Properties","text":"AR                 0   136.500     3.330     0.000     0.000     0.000\nCH4                2   141.400     3.746     0.000     2.600    13.000\nCO2                1   244.000     3.763     0.000     2.650     2.100\nCO                 1    98.100     3.650     0.000     1.950     1.800\nH2                 1    38.000     2.920     0.000     0.790   280.000\nH2O                2   572.400     2.605     1.844     0.000     4.000\nO2                 1   107.400     3.458     0.000     1.600     3.800","category":"page"},{"location":"Library/trans/","page":"Transport Properties","title":"Transport Properties","text":"The different columns present in the above table is described below.","category":"page"},{"location":"Library/trans/","page":"Transport Properties","title":"Transport Properties","text":"Column-1: Name of species\nColumn-2: Geometric configuration of the species; 0- single atom, 1- linear molecule, 2-nonlinear molecule\nColumn-3: Lennard-Jones potential well depth expressed as epsilonk_B and has units K\nColumn-4: Lennard-Jones collision diameter (sigma) in Angstroms\nColumn-5: Dipole moment (mu) in Debye\nColumn-6: Polarizability (alpha) in cubic Angstroms\nColumn-7: Rotational relaxation collision number (Z_mathrmrot) at 298 K","category":"page"},{"location":"Library/trans/#Diffusion-coefficients","page":"Transport Properties","title":"Diffusion coefficients","text":"","category":"section"},{"location":"Library/trans/#Binary-diffusion-coefficients","page":"Transport Properties","title":"Binary diffusion coefficients","text":"","category":"section"},{"location":"Library/trans/","page":"Transport Properties","title":"Transport Properties","text":"The binary diffusion coefficient is expressed as ","category":"page"},{"location":"Library/trans/","page":"Transport Properties","title":"Transport Properties","text":"D_jk = frac316 frac sqrt2pi N_Ak_B^3T^3m_jk ppi sigma_jk^2 Omega^(11) ","category":"page"},{"location":"Library/trans/","page":"Transport Properties","title":"Transport Properties","text":"Here N_A is the Avogadro's number, k_B is the Boltzmann constant, p is the pressure, and T is the temperature. The reduced molar mass of the species pair (j,k) is defined as","category":"page"},{"location":"Library/trans/","page":"Transport Properties","title":"Transport Properties","text":"m_jk = fracm_jm_km_j+m_k","category":"page"},{"location":"Library/trans/","page":"Transport Properties","title":"Transport Properties","text":"The collision integral Omega^(11) is determined using the reduced temperature T^*_jk and the reduced dipole moment delta^*_jk","category":"page"},{"location":"Library/trans/","page":"Transport Properties","title":"Transport Properties","text":"T^*_jk = frack_BTepsilon_jk","category":"page"},{"location":"Library/trans/","page":"Transport Properties","title":"Transport Properties","text":"delta^*_jk = frac12 fracmu^2_jkepsilon_jksigma_jk^3","category":"page"},{"location":"Library/trans/","page":"Transport Properties","title":"Transport Properties","text":"The reduced dipole moment depends on the polarizability of the interacting molecules. In the case where both molecules are  either polar or non-polar, then it follows","category":"page"},{"location":"Library/trans/","page":"Transport Properties","title":"Transport Properties","text":"epsilon_jk = sqrtepsilon_j epsilon_k","category":"page"},{"location":"Library/trans/","page":"Transport Properties","title":"Transport Properties","text":"mu_jk^2 = mu_j mu_k","category":"page"},{"location":"Library/trans/","page":"Transport Properties","title":"Transport Properties","text":"and the reduced collision diameter sigma_jk is defined as","category":"page"},{"location":"Library/trans/","page":"Transport Properties","title":"Transport Properties","text":"sigma_jk = fracsigma_k+sigma_j2","category":"page"},{"location":"Library/trans/","page":"Transport Properties","title":"Transport Properties","text":"In the case of interaction between a polar and non-polar molecule","category":"page"},{"location":"Library/trans/","page":"Transport Properties","title":"Transport Properties","text":"epsilon_jk= xi^2  sqrtepsilon_j epsilon_k","category":"page"},{"location":"Library/trans/","page":"Transport Properties","title":"Transport Properties","text":"sigma_jk = frac12 (sigma_j + sigma_k) xi^-16","category":"page"},{"location":"Library/trans/","page":"Transport Properties","title":"Transport Properties","text":"mu_jk= 0","category":"page"},{"location":"Library/trans/","page":"Transport Properties","title":"Transport Properties","text":"xi = 1+frac14 alpha_n^* mu_p^* sqrt fracepsilon_pepsilon_n ","category":"page"},{"location":"Library/trans/","page":"Transport Properties","title":"Transport Properties","text":"Note that the subscripts p and n represents either j or k. If j is polar species, then the subscript p refers to that species","category":"page"},{"location":"Library/trans/","page":"Transport Properties","title":"Transport Properties","text":"alpha_n^* = fracalpha_nsigma_n^3","category":"page"},{"location":"Library/trans/","page":"Transport Properties","title":"Transport Properties","text":"mu_p^* = fracmu_psqrtepsilon_psigma_p^3","category":"page"},{"location":"Library/trans/","page":"Transport Properties","title":"Transport Properties","text":"The estimation of Omega^(11) is a table look up procedure using the values of T^*_jk and delta^*_jk.","category":"page"},{"location":"Library/trans/#Mixture-diffusion-coefficients","page":"Transport Properties","title":"Mixture diffusion coefficients","text":"","category":"section"},{"location":"Library/trans/","page":"Transport Properties","title":"Transport Properties","text":"The mixture diffusion coefficients are calculated from","category":"page"},{"location":"Library/trans/","page":"Transport Properties","title":"Transport Properties","text":"D_km = frac1-Y_ksum_jne k^N X_jD_jk","category":"page"},{"location":"Library/trans/","page":"Transport Properties","title":"Transport Properties","text":"In the above equation, Y_k is the mass fraction of the species k, and X_j is the mole fraction of species j. N is the total number of species","category":"page"},{"location":"Library/trans/#Viscosity","page":"Transport Properties","title":"Viscosity","text":"","category":"section"},{"location":"Library/trans/","page":"Transport Properties","title":"Transport Properties","text":"The viscosity of the mixture is calculated using pure species viscosity. The pure species viscosity is defined as","category":"page"},{"location":"Library/trans/","page":"Transport Properties","title":"Transport Properties","text":"eta_k = frac516 fracsqrtpi m_k k_BTN_Api sigma_k^2 Omega^(22)","category":"page"},{"location":"Library/trans/","page":"Transport Properties","title":"Transport Properties","text":"The Lennard-Jones collision integral Omega^(22) is estimated using a table lookup procedure and depends on the reduced temperature. ","category":"page"},{"location":"Library/trans/","page":"Transport Properties","title":"Transport Properties","text":"T^*_k = frack_BTepsilon_k","category":"page"},{"location":"Library/trans/","page":"Transport Properties","title":"Transport Properties","text":"and the reduced dipole moment","category":"page"},{"location":"Library/trans/","page":"Transport Properties","title":"Transport Properties","text":"delta^*_k = frac12 fracmu_k^2epsilon_k sigma_k^3","category":"page"},{"location":"Library/trans/","page":"Transport Properties","title":"Transport Properties","text":"The viscosity of the mixture is then defined as","category":"page"},{"location":"Library/trans/","page":"Transport Properties","title":"Transport Properties","text":"eta = sum_k=1^N fracX_keta_ksumj=1^K X_jPhi_kj","category":"page"},{"location":"Library/trans/","page":"Transport Properties","title":"Transport Properties","text":"Phi_kj= frac1sqrt8 left(1+fracM_kM_jright)^-12 left( 1+ left(fraceta_keta_jright)^12 left(fracM_jM_kright)^14right)^2","category":"page"},{"location":"Library/trans/#Thermal-conductivity","page":"Transport Properties","title":"Thermal conductivity","text":"","category":"section"},{"location":"Library/trans/","page":"Transport Properties","title":"Transport Properties","text":"Similar to calculating viscosity, the thermal conductivity of a mixture is calculated from the pure species thermal conductivity.  The pure species thermal conductivity is defined as","category":"page"},{"location":"Library/trans/","page":"Transport Properties","title":"Transport Properties","text":"lambda_k = fraceta_kM_k left( f_t C_vt + f_r C_vr + f_v C_vv right)","category":"page"},{"location":"Library/trans/","page":"Transport Properties","title":"Transport Properties","text":"f_t = frac52left( 1-frac2pi fracC_vrC_vt fracAB right)","category":"page"},{"location":"Library/trans/","page":"Transport Properties","title":"Transport Properties","text":"f_v = fracrho D_kketa_k","category":"page"},{"location":"Library/trans/","page":"Transport Properties","title":"Transport Properties","text":"f_r = f_v left( 1+ frac2pi fracABright)","category":"page"},{"location":"Library/trans/","page":"Transport Properties","title":"Transport Properties","text":"A = 25-f_v","category":"page"},{"location":"Library/trans/","page":"Transport Properties","title":"Transport Properties","text":"B = Z_rot + frac2pi left( frac53 fracC_vrR + f_vright)","category":"page"},{"location":"Library/trans/","page":"Transport Properties","title":"Transport Properties","text":"The molar heat capacity C_v for rotational, vibrational or transnational mode depends on the molecule's geometry. For linear molecules","category":"page"},{"location":"Library/trans/","page":"Transport Properties","title":"Transport Properties","text":"fracC_vtR = frac32","category":"page"},{"location":"Library/trans/","page":"Transport Properties","title":"Transport Properties","text":"fracC_vrR = 1","category":"page"},{"location":"Library/trans/","page":"Transport Properties","title":"Transport Properties","text":"fracC_vvR = C_v  - 25R","category":"page"},{"location":"Library/trans/","page":"Transport Properties","title":"Transport Properties","text":"C_v = C_p -R","category":"page"},{"location":"Library/trans/","page":"Transport Properties","title":"Transport Properties","text":"For non-linear molecules","category":"page"},{"location":"Library/trans/","page":"Transport Properties","title":"Transport Properties","text":"fracC_vtR = frac32","category":"page"},{"location":"Library/trans/","page":"Transport Properties","title":"Transport Properties","text":"fracC_vrR = frac32","category":"page"},{"location":"Library/trans/","page":"Transport Properties","title":"Transport Properties","text":"fracC_vvR = C_v  - 3R","category":"page"},{"location":"Library/trans/","page":"Transport Properties","title":"Transport Properties","text":"C_v = C_p -R","category":"page"},{"location":"Models/batch/#Batch-Reactor","page":"Batch","title":"Batch Reactor","text":"","category":"section"},{"location":"Models/batch/","page":"Batch","title":"Batch","text":"The batch model simulates a constant volume batch reactor.  The code integrates the following governing equation ","category":"page"},{"location":"Models/batch/","page":"Batch","title":"Batch","text":"fracd(rho_k)dt = dots_k M_k A_sv + dotomega_kM_k","category":"page"},{"location":"Models/batch/","page":"Batch","title":"Batch","text":"rho = sum rho_k","category":"page"},{"location":"Models/batch/","page":"Batch","title":"Batch","text":"p = fracrho RTbarM","category":"page"},{"location":"Models/batch/","page":"Batch","title":"Batch","text":"Here rho_k is the mass density of species k defined as rho Y_k, where Y_k is the mass fraction of species k and rho is the density (kg/m^3) of the mixture. M_k is the molecular weight of species k (Kg/mol), dots_k is the molar production rate (mol/m^2-s) of species k due to surface reactions, dotomega_k is the molar production rate (mol/m^3-s) of species k due to gas phase reactions, and A_sv is the surface area to volume (1/m). ","category":"page"},{"location":"Models/batch/#Running-the-code","page":"Batch","title":"Running the code","text":"","category":"section"},{"location":"Models/batch/","page":"Batch","title":"Batch","text":"The code is invoked by using the following method.","category":"page"},{"location":"Models/batch/","page":"Batch","title":"Batch","text":"batch(input_file::AbstractString, lib_dir::AbstractString)","category":"page"},{"location":"Models/batch/#ReactionEngine.batch-Tuple{AbstractString, AbstractString}","page":"Batch","title":"ReactionEngine.batch","text":"batch(inputfile::AbstractString, libdir::AbstractString)\n\ninput_file : Input xml file (String)\nlib_dir : The directory where the data files are present.            In the present version, the data files are present in the lib directory within the test folder.            The user must specify the relative path to the lib directory. The name of the lib directory need not be           \"lib\"\n\n\n\n\n\n","category":"method"},{"location":"Models/batch/","page":"Batch","title":"Batch","text":"On the Julia REPL ","category":"page"},{"location":"Models/batch/","page":"Batch","title":"Batch","text":"julia>using ReactionEngine\njulia>batch(\"batch.xml\",\"../lib/\")","category":"page"},{"location":"Models/batch/#Input-file","page":"Batch","title":"Input file","text":"","category":"section"},{"location":"Models/batch/","page":"Batch","title":"Batch","text":"The method takes file_name as the argument. The file_name points to the input XML file. The structure of the XML input file is shown below.","category":"page"},{"location":"Models/batch/","page":"Batch","title":"Batch","text":"?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n<batch>\n    <gasphase>CH4 H2O H2 CO CO2 O2 N2</gasphase>\n    <molefractions>CH4=0.25,H2O=0.25,N2=0.5</molefractions>\n    <T>1073.15</T>\n    <p>1e5</p>\n    <Asv>10</Asv>\n    <time>10</time>\n    <surface_mech>ch4ni.xml</surface_mech>\n</batch>","category":"page"},{"location":"Models/batch/","page":"Batch","title":"Batch","text":"The meaning of different tags is specified below.","category":"page"},{"location":"Models/batch/","page":"Batch","title":"Batch","text":"<batch> : The root XML tag for batch\n<gasphase> : list of gas-phase species. The species names must be separated by white spaces or tab\n<molefractions> : inlet mole fraction of the gas-phase species. Instead of mole fractions, mass fractions may also be specified. In that case, the tag must be <massfractions>. You must ensure that the sum of mass or mole fractions specified is unity. There are no internal checks to ascertain this. \n<T>: operating temperature in K\n<p>: initial pressure in Pa\n<Asv> : Surface area to volume ratio (1/m)\n<time> : integration time in s\n<surface_mech> : name of the surface reaction mechanism","category":"page"},{"location":"Models/batch/#Output","page":"Batch","title":"Output","text":"","category":"section"},{"location":"Models/batch/","page":"Batch","title":"Batch","text":"The code generates two output files in the same directory where the input file batch.xml is present.  The file gas_profile.dat contains the mole fraction of the gas phase species as a function of time. The file surf_profile.dat contains the surface coverages of adsorbed species as a function of time.  In addition to these two files, the code also generates terminal output, which shows integration progress. The terminal output is nothing by the integration time. ","category":"page"},{"location":"Models/batch/","page":"Batch","title":"Batch","text":"An example terminal output is shown below.","category":"page"},{"location":"Models/batch/","page":"Batch","title":"Batch","text":"julia> batch(\"test/batch/batch.xml\")\n0.000000e+00\n5.380030e-12\n7.322192e-12\n1.091965e-11\n1.389281e-11\n..\n..\n..\n9.889415e+00\n9.983973e+00\n1.000000e+01\nSolver Integration: Success","category":"page"},{"location":"Models/batch/","page":"Batch","title":"Batch","text":"A sample output of gas_profile.dat is shown below. ","category":"page"},{"location":"Models/batch/","page":"Batch","title":"Batch","text":"         t           T           p         rho         CH4         H2O          H2          CO         CO2          O2          N2\n0.0000e+00  1.0732e+03  1.0000e+05  2.5240e-01  2.5000e-01  2.5000e-01  0.0000e+00  0.0000e+00  0.0000e+00  0.0000e+00  5.0000e-01\n5.3800e-12  1.0732e+03  1.0000e+05  2.5240e-01  2.5000e-01  2.5000e-01  2.8224e-17  2.8064e-31  3.6828e-43  3.5083e-34  5.0000e-01\n7.3222e-12  1.0732e+03  1.0000e+05  2.5241e-01  2.5000e-01  2.5000e-01  7.2345e-17  5.7521e-31  5.7355e-42  1.1037e-33  5.0000e-01\n1.3893e-11  1.0732e+03  1.0000e+05  2.5241e-01  2.5000e-01  2.5000e-01  5.7775e-16  5.2239e-29  1.5426e-39  2.3067e-32  5.0000e-01\n1.7496e-11  1.0732e+03  1.0000e+05  2.5241e-01  2.5000e-01  2.5000e-01  1.2389e-15  2.4341e-28  1.3782e-38  6.7062e-32  5.0000e-01\n...\n...\n9.8894e+00  1.0732e+03  1.0205e+05  2.5241e-01  2.3492e-01  2.2984e-01  3.5247e-02  4.9651e-03  5.0865e-03  3.8647e-17  4.8994e-01\n9.9840e+00  1.0732e+03  1.0206e+05  2.5241e-01  2.3483e-01  2.2971e-01  3.5461e-02  4.9881e-03  5.1229e-03  1.5330e-17  4.8988e-01\n1.0000e+01  1.0732e+03  1.0207e+05  2.5241e-01  2.3481e-01  2.2969e-01  3.5498e-02  4.9920e-03  5.1290e-03  1.8337e-17  4.8987e-01","category":"page"},{"location":"Models/batch/","page":"Batch","title":"Batch","text":"A sample output of surf_profile.dat is shown below. ","category":"page"},{"location":"Models/batch/","page":"Batch","title":"Batch","text":"         t           T        (NI)       H(NI)       O(NI)     CH4(NI)     H2O(NI)     CO2(NI)      CO(NI)      OH(NI)       C(NI)     HCO(NI)      CH(NI)     CH3(NI)     CH2(NI)\n0.0000e+00  1.0732e+03  6.0000e-01  0.0000e+00  0.0000e+00  0.0000e+00  4.0000e-01  0.0000e+00  0.0000e+00  0.0000e+00  0.0000e+00  0.0000e+00  0.0000e+00  0.0000e+00  0.0000e+00\n5.3800e-12  1.0732e+03  6.0842e-01  2.9832e-04  3.2879e-05  1.1712e-09  3.9101e-01  2.7168e-33  5.9257e-21  2.3256e-04  1.0792e-12  2.3196e-23  8.8535e-13  4.6995e-11  8.9031e-12\n7.3222e-12  1.0732e+03  6.1140e-01  4.1988e-04  5.9207e-05  1.1838e-09  3.8782e-01  5.7960e-32  1.8386e-20  3.0147e-04  2.8680e-12  8.2649e-23  1.6840e-12  5.9925e-11  1.4892e-11\n1.0920e-11  1.0732e+03  6.1683e-01  6.6111e-04  1.2488e-04  1.1946e-09  3.8197e-01  1.7656e-30  2.0089e-19  4.1135e-04  9.6114e-12  3.6587e-22  3.4522e-12  7.8856e-11  2.6942e-11\n...\n...\n...\n9.8894e+00  1.0732e+03  7.7820e-01  1.0109e-01  3.5083e-02  1.4451e-09  5.2625e-04  5.6835e-06  8.4964e-02  1.2547e-04  9.1985e-06  6.5892e-13  3.1341e-11  4.1784e-10  2.2512e-10\n9.9840e+00  1.0732e+03  7.7791e-01  1.0137e-01  3.4840e-02  1.4442e-09  5.2584e-04  5.6713e-06  8.5216e-02  1.2498e-04  9.2286e-06  6.6385e-13  3.1254e-11  4.1700e-10  2.2450e-10\n1.0000e+01  1.0732e+03  7.7787e-01  1.0141e-01  3.4799e-02  1.4441e-09  5.2576e-04  5.6693e-06  8.5259e-02  1.2490e-04  9.2337e-06  6.6469e-13  3.1239e-11  4.1686e-10  2.2439e-10","category":"page"},{"location":"Models/sens/#Sensitivity-Analysis","page":"Sensitivity","title":"Sensitivity Analysis","text":"","category":"section"},{"location":"Models/sens/","page":"Sensitivity","title":"Sensitivity","text":"The sensitivity analysis in ReactionEngine evaluates the global sensitivity using Sobol sampling. It reports the Sobol indices for all species mentioned in the input file against the micro-kinetic model parameters. The function evaluation is performed using a batch reactor model, and therefore, you may please refer to the documentation for the batch reactor model to understand the governing equations that are solved. ","category":"page"},{"location":"Models/sens/","page":"Sensitivity","title":"Sensitivity","text":"In general, only the forward reaction rate parameters can be specified independently for a micro-kinetic model where the reactions are expressed as reversible pairs. The reverse reaction rate parameters are then calculated from the equilibrium constant. However, this requires thermodynamic data for the calculation of equilibrium constants.  In many surface reaction mechanisms, the reversible reactions are explicitly expressed as two reactions; one represents the forward direction, and the other represents the reverse direction. This difficulty is mainly due to the non-availability of the NASA polynomial coefficients for the surface adsorbed species to calculate equilibrium constants. However, for such a reaction mechanism to be thermodynamically consistent, one has to ensure the following constraint on all forward-reverse reaction pairs.","category":"page"},{"location":"Models/sens/","page":"Sensitivity","title":"Sensitivity","text":"fracA_fT^betaA_r T^beta = exp(fracDelta SR)","category":"page"},{"location":"Models/sens/","page":"Sensitivity","title":"Sensitivity","text":"In such a case, all parameters correlate to at least one parameter. Therefore altering one parameter will alter another parameter constraint to the above correlation. While developing a surface reaction mechanism, one may assume that all parameters are uncorrelated. For instance, if the reaction mechanism contains 20 reversible reactions expressed as 40 irreversible pairs, one may want to perform a full sensitivity analysis assuming that all 40 parameters are uncorrelated. At some stage during the mechanism development, if you make the mechanism thermodynamically consistent, you may prefer to perform the analysis using only 20 independent parameters. In that case, altering any of the 20 parameters will also alter the parameter of the corresponding reaction pair. One can also think of secondary interactions, which are not considered here. So, the analysis assumes that the parameters are independent or uncorrelated in either case. This is important for performing Sobol decomposition or ANOVA decomposition. The Sobol decomposition of a function y=f(x) is given as","category":"page"},{"location":"Models/sens/","page":"Sensitivity","title":"Sensitivity","text":"y= f(x) = f_0 + sum_i=1^n f_i(x_i) + sum_i=1^n sum_j=i+1^n f_ij(x_ix_j) + ldots + f_12cdots n(x_1 x_2ldotsx_n)","category":"page"},{"location":"Models/sens/","page":"Sensitivity","title":"Sensitivity","text":"where","category":"page"},{"location":"Models/sens/","page":"Sensitivity","title":"Sensitivity","text":"f_0 = E(y)","category":"page"},{"location":"Models/sens/","page":"Sensitivity","title":"Sensitivity","text":"f_i(x_i) = E(yvert x_i) - E(y)","category":"page"},{"location":"Models/sens/","page":"Sensitivity","title":"Sensitivity","text":"f_ij(x_ix_j) = E(yvert x_ix_j) - E(yvert x_i) - E(yvert x_j) - E(y) = E(yvert x_ix_j) - f_i - f_j - f_0","category":"page"},{"location":"Models/sens/","page":"Sensitivity","title":"Sensitivity","text":"Taking the variance of function f(x)","category":"page"},{"location":"Models/sens/","page":"Sensitivity","title":"Sensitivity","text":"V(y) = Vf_0 +Vleft sum_i=1^n f_i(x_i)right + Vleftsum_i=1^n sum_j=i+1^n f_ij(x_ix_j)right + ldots +V f_12cdots n(x_1 x_2ldotsx_n)","category":"page"},{"location":"Models/sens/","page":"Sensitivity","title":"Sensitivity","text":"i.e.,","category":"page"},{"location":"Models/sens/","page":"Sensitivity","title":"Sensitivity","text":"V(y) = 0 +  sum_i=1^n Vf_i(x_i) + sum_i=1^n sum_j=i+1^n Vf_ij(x_ix_j) + ldots + Vf_12cdots n(x_1 x_2ldotsx_n)","category":"page"},{"location":"Models/sens/","page":"Sensitivity","title":"Sensitivity","text":"V = sum_i=1^n V_i + sum_i=1^n sum_j=i+1^n V_ij+ ldots + V_12ldots n","category":"page"},{"location":"Models/sens/","page":"Sensitivity","title":"Sensitivity","text":"The global sensitivity index is then defined as","category":"page"},{"location":"Models/sens/","page":"Sensitivity","title":"Sensitivity","text":"S_i =frac V_iV","category":"page"},{"location":"Models/sens/","page":"Sensitivity","title":"Sensitivity","text":"which is also known as the main sensitivity index of the first order Sobol index. The total sensitivity index is defined as","category":"page"},{"location":"Models/sens/","page":"Sensitivity","title":"Sensitivity","text":"S_i^T = fracV_i^TV","category":"page"},{"location":"Models/sens/","page":"Sensitivity","title":"Sensitivity","text":"where","category":"page"},{"location":"Models/sens/","page":"Sensitivity","title":"Sensitivity","text":"V_i^T= V_i + sum_j V_ij + sum_jk V_ijk + ldots","category":"page"},{"location":"Models/sens/","page":"Sensitivity","title":"Sensitivity","text":"The first order Sobol index gives the variance of the model output due to the corresponding parameter input. The total sensitivity index also considers the interaction among the parameters. Therefore, the difference between the total and main sensitivity indices shows the contribution due to interaction. ","category":"page"},{"location":"Models/sens/#Running-the-code","page":"Sensitivity","title":"Running the code","text":"","category":"section"},{"location":"Models/sens/","page":"Sensitivity","title":"Sensitivity","text":"The code is invoked by using the following method.","category":"page"},{"location":"Models/sens/","page":"Sensitivity","title":"Sensitivity","text":"global_sensitivity(input_file::AbstractString, lib_dir::AbstractString)","category":"page"},{"location":"Models/sens/#ReactionEngine.global_sensitivity-Tuple{AbstractString, AbstractString}","page":"Sensitivity","title":"ReactionEngine.global_sensitivity","text":"globalsensitivity(inputfile::AbstractString, lib_dir::AbstractString)\n\ninput_file : Input xml file (String)\nlib_dir : The directory where the data files are present.            In the present version, the data files are present in the lib directory within the test folder.            The user must specify the relative path to the lib directory. The name of the lib directory need not be           \"lib\"\n\n\n\n\n\n","category":"method"},{"location":"Models/sens/","page":"Sensitivity","title":"Sensitivity","text":"On the Julia REPL ","category":"page"},{"location":"Models/sens/","page":"Sensitivity","title":"Sensitivity","text":"julia>using ReactionEngine\njulia>global_sensitivity(\"sensitivity.xml\",\"../lib/\")","category":"page"},{"location":"Models/sens/#Input-file","page":"Sensitivity","title":"Input file","text":"","category":"section"},{"location":"Models/sens/","page":"Sensitivity","title":"Sensitivity","text":"The method takes file_path  and path to lib directory as the arguments. The file_path points to the input XML file. The structure of the XML input file is shown below.","category":"page"},{"location":"Models/sens/","page":"Sensitivity","title":"Sensitivity","text":"?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n<sensitivity>\n    <gsa_species>CH4 H2O H2 CO CO2 O2 N2</gsa_species>\n    <gsa_lb>5</gsa_lb>\n    <gsa_ub>10</gsa_ub>\n    <gsa_N>100</gsa_N>\n    <gsa_model>cstr.xml</gsa_model>\n    <p_smech>1:6=7:12,15=16,16:20</p_smech>\n</sensitivity>","category":"page"},{"location":"Models/sens/","page":"Sensitivity","title":"Sensitivity","text":"The meaning of different tags is listed below.","category":"page"},{"location":"Models/sens/","page":"Sensitivity","title":"Sensitivity","text":"<sensitivity>: Root xml tag for sensitivity analysis\n<gsa_species>: The species that need to be monitored for the parameter sensitivity analysis. The code will produce the output of parameter sensitivity of only those species which are listed in this element\n<gsa_lb>: lower percentage bound for the parameter value. For instance, if the value of the actual parameter is 100, then the lower bound considered for design matrix generation is 90 with a gsa_lb = 10\n<gsa_ub>: upper percentage bound for the parameter value. For instance, if the value of the actual parameter is 100, then the upper bound considered for design matrix generation is 110 with gsa_ub = 10\n<gsa_N>: the size of the sample size. With a sample size of 100, 100 points will be sampled between the lower and upper bounds for each parameter. The higher the sample size higher will be calculation time. \n<gsa_model>: the reactor model that will be considered for integration. The content of the tag is the name of the XML input file of the reactor model. The file must be present in the working directory. This is \n<p_smech>: parameters of the surface reaction mechanism that needs to be considered for sensitivity analysis. There are different options for specifying the parameter list from a mechanism\nAll parameters: Use \":\" as the value of <p_smech> element to consider all pre-exponential factors and sticking coefficient as sensitivity parameters. In such specifications, the reverse reaction rates will not be adjusted to maintain the initial ratio. (e.g. <p_smech>:</p_smech>)\nReversible reaction: If the reverse reaction parameters need to be adjusted according to the initial ratio, then a reverse reaction must be specified for each forward reaction. For instance, if you want to consider the pre-exponential factor of reaction 15 as a sensitivity parameter, during sensitivity analysis, this parameter will be sampled between its upper and lower limit. This also changes the ratio between the forward and reverse reaction rate parameters as specified in the original mechanism. By specifying a reverse reaction, the ratio can be maintained a constant. For instance, in the above example, reaction 16 is the reverse of reaction 15. For every sample values of the pre-exponential factor of reaction 15, the pre-exponential factor of reaction 16 will be adjusted to maintain the initial ratio between these two in the mechanism input file. Only the parameter of reaction to the left of \"=\" will be considered as sensitivity parameter, and the pre-exponential factor to the right of \"=\" will be adjusted to maintain the initial ratio. \nContiguous parameters: Use \":\" to specify contiguous reactions. For instance, 1:6=7:12 means pre-exponential factors of reactions from 1 to 6 will be considered as sensitivity parameters, and reactions from 7 to 12 are reverse pairs of reactions from 1 to 6. i.e., reaction 7 is the reverse pair of reaction 1, reaction 8 is the reverse pair of reaction 2 and so on. Comma-separated list of parameters can be provided in <p_smech>\nUnconstrained reverse reactions: If the user does not want to constrain the reverse reaction parameters according to the initial ratio, then omit \"=\". For instance, <p_smech>16:20</p_smech> means the pre-exponential factors of reactions 16 to 20 will be considered as sensitivity parameters. However, their corresponding reverse reaction parameters will not be adjusted to maintain the initial ratio.","category":"page"},{"location":"Models/equil/#Equilibrate","page":"Equilibrate","title":"Equilibrate","text":"","category":"section"},{"location":"Models/equil/","page":"Equilibrate","title":"Equilibrate","text":"Equilibrate is a program for the calculation of equilibrium composition. There are different methods for calculating the equilibrium composition of a reacting mixture. For a system that consists of N species and K elements (N  K), the elements are conserved, and the classical approach involves the solution of N+K non-linear equations. This approach calculates the moles of different species (N numbers) at equilibrium and K number of Lagrangian multipliers.  An alternate method solves N-K non-linear equations involving equilibrium constants and K equations describing component activities. The latter approach is adopted in the equilibrate program.","category":"page"},{"location":"Models/equil/#Running-the-code","page":"Equilibrate","title":"Running the code","text":"","category":"section"},{"location":"Models/equil/","page":"Equilibrate","title":"Equilibrate","text":"The code is invoked by using the following method.","category":"page"},{"location":"Models/equil/","page":"Equilibrate","title":"Equilibrate","text":"equilibrate(input_file::AbstractString, lib_dir::AbstractString)","category":"page"},{"location":"Models/equil/#ReactionEngine.equilibrate-Tuple{AbstractString, AbstractString}","page":"Equilibrate","title":"ReactionEngine.equilibrate","text":"equilibrate(inputfile::AbstractString, libdir::AbstractString)\n\ninput_file : Input xml file (String)\nlib_dir : The directory where the data files are present.            In the present version, the data files are present in the lib directory within the test folder.            The user must specify the relative path to the lib directory. The name of the lib directory need not be           \"lib\"\n\n\n\n\n\n","category":"method"},{"location":"Models/equil/","page":"Equilibrate","title":"Equilibrate","text":"On the Julia REPL ","category":"page"},{"location":"Models/equil/","page":"Equilibrate","title":"Equilibrate","text":"julia>using ReactionEngine\njulia>equulibrate(\"equil.xml\",\"../lib/\")","category":"page"},{"location":"Models/equil/#Input-file","page":"Equilibrate","title":"Input file","text":"","category":"section"},{"location":"Models/equil/","page":"Equilibrate","title":"Equilibrate","text":"The method takes file_path as the argument. The file_path points to the input XML file. The structure of the XML input file is shown below.","category":"page"},{"location":"Models/equil/","page":"Equilibrate","title":"Equilibrate","text":"<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n<equil>\n    <gasphase>CH4 H2 CO CO2 H2O O2 N2 </gasphase>\n    <molefractions>CH4=0.6, H2O=0.1, CO2=0.2, N2=0.1</molefractions>\n    <T>1073.15</T>\n    <p>1e5</p>\n</equil>","category":"page"},{"location":"Models/equil/","page":"Equilibrate","title":"Equilibrate","text":"The meaning of different tags is specified below.","category":"page"},{"location":"Models/equil/","page":"Equilibrate","title":"Equilibrate","text":"<equil> : The root XML tag for equilibrate\n<gasphase> : list of gas-phase species. The species names must be separated by white spaces or tab\n<molefractions> : Initial mole fraction of the gas-phase species. Instead of mole fractions, mass fractions may also be specified. In that case, the tag must be <massfractions>. You must ensure that the sum of mass or mole fractions specified is unity. There are no internal checks to ascertain this. \n<T>: operating temperature in K\n<p>: initial pressure in Pa","category":"page"},{"location":"Models/equil/#Output","page":"Equilibrate","title":"Output","text":"","category":"section"},{"location":"Models/equil/","page":"Equilibrate","title":"Equilibrate","text":"The code generates only screen output. An example output is shown below.","category":"page"},{"location":"Models/equil/","page":"Equilibrate","title":"Equilibrate","text":"Inititial condition:\n\nSpecies          moles           molefraction\n       CH4       6.7244e+00      6.0000e-01 \n       CO2       2.2415e+00      2.0000e-01 \n       H2O       1.1207e+00      1.0000e-01 \n        N2       1.1207e+00      1.0000e-01 \n        CO       0.0000e+00      0.0000e+00 \n        O2       0.0000e+00      0.0000e+00 \n        H2       0.0000e+00      0.0000e+00 \n\nEquilibrium composition @ T= 1073.15 K and p=100000.0 Pa\n\nSpecies          moles           molefraction\n       CH4       3.3912e+00      1.8973e-01\n       CO2       1.2649e-02      7.0766e-04\n       H2O       1.6324e-02      9.1329e-04\n        CO       5.5621e+00      3.1118e-01\n        O2       3.2984e-23      1.8454e-24\n        H2       7.7709e+00      4.3476e-01\n        N2       1.1207e+00      6.2703e-02","category":"page"},{"location":"Models/inspect/#Inspect","page":"Inspect","title":"Inspect","text":"","category":"section"},{"location":"Models/inspect/","page":"Inspect","title":"Inspect","text":"Inspect is a module for testing a surface reaction mechanism. The code integrates the surface coverages until a steady state is reached for a given gas phase composition, temperature and pressure. i.e.,","category":"page"},{"location":"Models/inspect/","page":"Inspect","title":"Inspect","text":"fracdtheta_kdt = fracdots_k sigma_kGamma","category":"page"},{"location":"Models/inspect/","page":"Inspect","title":"Inspect","text":"where theta_k is the surface coverage of species  k, t is the time, dots_k is the molar production rate (mol/m^2-s) of species k, sigma_k is the site coordination number and Gamma is the total site density (mol/m^2). After successful integration, the code returns the steady-state coverages, surface flux (reaction rate) of individual surface species and the sum of surface coverages and fluxes. Ideally, the surface coverages must sum to 1, and the sum of fluxes must vanish at steady state.","category":"page"},{"location":"Models/inspect/#Running-the-code","page":"Inspect","title":"Running the code","text":"","category":"section"},{"location":"Models/inspect/","page":"Inspect","title":"Inspect","text":"The code is invoked by using the following method.","category":"page"},{"location":"Models/inspect/","page":"Inspect","title":"Inspect","text":"inspect(input_file::AbstractString, lib_dir::AbstractString) ","category":"page"},{"location":"Models/inspect/#ReactionEngine.inspect-Tuple{AbstractString, AbstractString}","page":"Inspect","title":"ReactionEngine.inspect","text":"inspect(inputfile::AbstractString, libdir::AbstractString)\n\ninput_file : Input xml file (String)\nlib_dir : The directory where the data files are present.            In the present version, the data files are present in the lib directory within the test folder.            The user must specify the relative path to the lib directory. The name of the lib directory need not be           \"lib\"\n\n\n\n\n\n","category":"method"},{"location":"Models/inspect/","page":"Inspect","title":"Inspect","text":"On the Julia REPL ","category":"page"},{"location":"Models/inspect/","page":"Inspect","title":"Inspect","text":"julia>using ReactionEngine\njulia>inspect(\"inspect.xml\",\"../lib/\")","category":"page"},{"location":"Models/inspect/#Input-file","page":"Inspect","title":"Input file","text":"","category":"section"},{"location":"Models/inspect/","page":"Inspect","title":"Inspect","text":"The method takes input_path and path to the lib directory as the argument. The file_path points to the input XML file. The structure of the XML input file is shown below.","category":"page"},{"location":"Models/inspect/","page":"Inspect","title":"Inspect","text":"<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n<inspect>\n    <gasphase>CH4 H2O H2 CO CO2 O2 N2</gasphase>\n    <molefractions>CH4=0.2,H2O=0.1,CO2=0.7</molefractions>\n    <T>1073.15</T>\n    <p>1e5</p>\n    <mech>data/ch4ni.xml</mech>\n</inspect>","category":"page"},{"location":"Models/inspect/","page":"Inspect","title":"Inspect","text":"The XML element <gasphase> lists all gas-phase species participating in the surface reaction mechanism. The surface reaction mechanism is an XML file specified using the XML element <mech>. Please refer to the Library section for more information on mechanism input files. In the above example, the name of the surface reaction mechanism file is ch4ni.xml and is present in the data directory. The XML input for the mechanism may be present in any directory and not necessarily in the data folder. The data folder may be found at the same level as the src folder in the current distribution. It is advisable to maintain all library-related files in the data folder. ","category":"page"},{"location":"Models/inspect/","page":"Inspect","title":"Inspect","text":"In addition to the XML input file, the code also requires a therm.dat file. The code expects this file in the data folder by default. You must ensure that all the species present in the XML element <gasphase> are listed in the therm.dat file.","category":"page"},{"location":"Models/inspect/#Output","page":"Inspect","title":"Output","text":"","category":"section"},{"location":"Models/inspect/","page":"Inspect","title":"Inspect","text":"The code does not generate any file output.  An example of terminal output that inspect generates is shown below","category":"page"},{"location":"Models/inspect/","page":"Inspect","title":"Inspect","text":"Initial coverage: \n-----------------------\n        (NI)     6.0000e-01 \n       H(NI)     0.0000e+00 \n       O(NI)     0.0000e+00 \n     CH4(NI)     0.0000e+00 \n     H2O(NI)     4.0000e-01 \n     CO2(NI)     0.0000e+00 \n      CO(NI)     0.0000e+00 \n      OH(NI)     0.0000e+00 \n       C(NI)     0.0000e+00 \n     HCO(NI)     0.0000e+00 \n      CH(NI)     0.0000e+00 \n     CH3(NI)     0.0000e+00 \n     CH2(NI)     0.0000e+00 \n\nT(K):   1073.15\np(Pa):  100000.0\n\nFinal coverage and flux after [10.0](s): \n\n     Species     coverage        flux(mol/m2-s)\n-------------------------------------------------\n        (NI)     2.9259e-01      -2.2798e-14 \n       H(NI)     3.4172e-03      +2.0295e-14 \n       O(NI)     7.0353e-01      +4.2465e-14 \n     CH4(NI)     4.5279e-10      -2.3961e-17 \n     H2O(NI)     8.4369e-05      +7.3585e-16 \n     CO2(NI)     8.5809e-06      +0.0000e+00 \n      CO(NI)     1.4316e-04      +1.3353e-19 \n      OH(NI)     2.2621e-04      -1.9896e-14 \n       C(NI)     1.1795e-06      -4.2775e-19 \n     HCO(NI)     3.0945e-16      -3.3087e-24 \n      CH(NI)     1.8607e-10      +6.9880e-19 \n     CH3(NI)     1.7535e-09      +7.9791e-19 \n     CH2(NI)     1.2266e-09      -9.2538e-19 \n\nSum of fluxes (mol/m2-s): 2.0778686468957624e-14\nSum of coverages: 0.9999999989545821","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = ReactionEngine","category":"page"},{"location":"","page":"Home","title":"Home","text":"Documentation for ReactionEngine.","category":"page"},{"location":"#ReactionEngine","page":"Home","title":"ReactionEngine","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Reaction Engine is a Julia package for the simulation of chemical reactors where gas-phase reactions and/or surface reactions occur. The package provides i) a library for calculating reaction source terms, transport properties, thermodynamic properties, and ii) a bunch of  reactor models for reactor simulation. Current capabilities are limited to the simulation of gas-phase and surface chemistry. A minimal description of equations used for the calculation of properties and the governing equations used for the simulation of different reactor models are provided in this manual. The current version has the following reactor models","category":"page"},{"location":"","page":"Home","title":"Home","text":"inspect: A program for integrating surface coverages\nthermo_probe : A program for calculating the thermochemical properties \ntransport_properties : A program for the calculation of transport properties (viscosity, thermal conducitivity, and diffusion coefficients)\nbatch : A program for the simulation of batch reactor\ncstr : A program for the simulation of continuous stirred tank reactor\nplug : A program for the simulation of tubular flow reactor \ngsa : A program for evaluating the global sensitivity coeffieint of reaction rate parameters\nequilibrate : A program for calculating equilibrium compositions","category":"page"}]
}
